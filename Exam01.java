
public class Exam01 {

	public static void main(String[] args) {
		
		//객체지향 프로그래밍의 특징
		
		//1. 캡슐화(Encapsulation) : 관련된 필드(변수)와 메소드를 하나로 묶고 실제 구현 내용을 위부로부터 감추는 기법.
		//->> 클래스로 묶는것. , 클래스를 만드는 방법!(ex 변수나 메소드 기능을 클래스 하나에 묶음.)
		//2. 상속(Inheritance) : 기존코드를 그대로 재사용하거나 재정의 , 이미 작성된 클래스의 특성을 그대로 이어받아 새로운 클래스 생성하는 기법.(상위클래스~~~하위클래스)
		//->> 재사용 + 확장
		//3. 추상화(Abstract) : 객체에서 공통된 속성과 행위를 추출하는 기법. 상세한 정보는 무시하고 필요한 정보들만 간추려서 구성.
		//->> 클래스 만드는 방법!(ex 핸드폰 만드는 클래스)
		//4. 다형성(Polymorphism) : 같은 기능(메소드)를 호출하더라도 객체에 따라 다르게 동작하는 것.
		//->> 상위클래스의 동작을 하위클래스에서 다시 정의하여 사용하는 것 또한 다형성이다.(다시 0정의하여 사용한다 ->>> 오버라이딩)
		//->> 같은 이름을 가지고 있어도 기능이 다르다
		
		//객체지향 프로그래밍의 장점 : 코드 재사용이 쉽다, 유지보수에 용이하다, 소프트웨어 생산성이 향상된다.
		
		//오버로딩 : 중복정의
		//오버라이딩 : 재정의
		
		
	}

}
